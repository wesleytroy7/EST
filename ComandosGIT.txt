Principais Comandos Git

git config --list » Lista as configurações do Git, se estiver dentro do repositório, lista mais itens
git config --global user.name "Meu Nome" » Define o nome de usuário para o Git
git config --global user.email "email@dominio.com" » Define o e-mail de usuário para o Git (tem de ser o cadastrado no GitHub)
git config --global core.editor vim » Define o editor de texto padrão para abrir automaticamente arquivos informados pelo Git


git init -> inicia um repositorio local
git clone -> baixa um repositorio remoto clonando para seu repositorio

git-add # mesmo comando que 'git add'

# O comando git-add não irá adicionar arquivos ignorados por padrão a menos que seja utilizado o parâmetro '-f'

git add -A # Adiciona todos arquivos que foram modificados, mesmo que: --all, --no-ignore-removal

git add *.txt # Adiciona todos os arquivos '.txt' que foram modificados

man git-add # manual completo sobre git-add

git add .    ou  git add <<nome\-arquivo>>   ->   adiciona arquivos ao seu repositorio 






git commit -m 'mensagem de commit' ->  salvar suas alterações e tonar rastreaveis no repositorio local, em formato de commit
git commit --amend  -> é uma forma conveniente de modificar o commit mais recente


git push -> salvar os commit em um servidor remoto 
git pull -> baixa as alterações do repositorio remoto para o repositorio local
git merge <nomedabranch> -> unir duas branchs ou resolver um conflito
git status -> prove informações refrentes ao projeto 
git log  -> historico de alteraçõs do commit

git reset --<nomedoarquivo> -> reseta alteraçoes

git branch ->  cria e visualisa ramos diferente com base na master e  Mostra em qual branch estou trabalhando
git checkout <nomedabranchExistente> >> com esse comando eu troco de branch apenas colocando o nome dela
git checkout - b  <nomedanovabranch> >> Cria uma nova branch para o trabalho e com o comando -b já muda direto para o novo branch
git branch -D <branchAserDeletada> >> seleciona e deleta uma branch com o parametro -D
obs.: Quando é realizado git init é criando uma branch master, os arquivos de da produção

https://git-scm.com/docs

git config --global user.name


git status -> apresenta o status
git log -> mostra os logs
git remoto add origin add -> adiciona uma origem uma origem remota(conectar meu repositório a um repositório remoto)


git push -u  origin master -> envia todos os commits no repositório local p/ o repositório remoto
git push -u origin master » Envia todos os arquivos modificados e “commitados” para o repositório no github
     -u - faz com que o Git armazene esse comando e da próxima vez basta utilizarmos git push
     origin- diz que o repositório no github possui o mesmo nome do projeto/diretório que você está enviando
     master - é o nome da branch (indicador)



git remoto rm origin -> remove a conta de sicronismo
-- branch são ramos de um repositório
git branch -> Mostra a branch que estou conectado ou lista às branch
git branch <nomedaBranch>  -> cria um ramo com os mesmo arquivos da branch master com um nome diferente
git checkout <nomedaBranch>  -> troca o ramo de trabalho, onde será feitas às alterações
git branch -D <nomedaBranch>  -> Deleta a branch desejada

git checkout -b  <nomedaBranch> cria a branch é me direciona para mesma para que eu faça alteraçoes na mesma

git pull origin master » Verifica as mudanças efetuadas por outros colaboradores do projeto

git diff HEAD » Verifica as partes dos arquivos alterados no último commit, veja mais opções em man git-diff
git reset arquivo.txt » Remove um arquivo do projeto
git checkout – arquivo.txt » Desfaz a última alteração feita num arquivo
git rm "*.txt" » Remove 1 ou mais arquivos utilizando “curinga”
git clone https://github.com/user/project.git » Copia um projeto pro seu PC
info git » Obtém a Documentação do git
man git » Obtém o Manual do git

https://terminalroot.com.br/git/
